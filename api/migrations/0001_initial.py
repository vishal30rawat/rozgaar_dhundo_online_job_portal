# Generated by Django 4.0.3 on 2022-03-24 11:32

import api.models
import api.upload_handlers
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that email already exists'}, max_length=254, unique=True)),
                ('mobile_number', models.CharField(blank=True, max_length=50, null=True)),
                ('resume', models.FileField(blank=True, null=True, upload_to=api.upload_handlers.applicant_resume, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])])),
                ('profile_picture', models.FileField(blank=True, null=True, upload_to=api.upload_handlers.applicant_profile_picture, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpg', 'jpeg'])])),
                ('can_work_remotely', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ('first_name',),
            },
            managers=[
                ('objects', api.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(error_messages={'unique': 'A city with that name already exists'}, max_length=250, unique=True)),
            ],
            options={
                'verbose_name': 'Cities',
                'verbose_name_plural': 'Cities',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(error_messages={'unique': 'A company with that name already exists'}, max_length=250, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('mobile_number', models.CharField(max_length=10)),
                ('logo', models.ImageField(blank=True, null=True, upload_to=api.upload_handlers.company_logo, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpg', 'jpeg'])])),
            ],
            options={
                'verbose_name': 'Companies',
                'verbose_name_plural': 'Companies',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='JobPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=250)),
                ('description', models.TextField()),
                ('total_vacancies', models.PositiveIntegerField(default=1)),
                ('expired_at', models.DateTimeField()),
                ('payroll_method', models.CharField(choices=[('H', 'Hourly'), ('W', 'Weekly'), ('M', 'Monthly'), ('A', 'Annually')], max_length=1)),
                ('pay_range_from', models.DecimalField(decimal_places=2, max_digits=10)),
                ('pay_range_to', models.DecimalField(decimal_places=2, max_digits=10)),
                ('can_be_remote', models.BooleanField(default=True)),
                ('cities', models.ManyToManyField(to='api.city')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.company')),
            ],
            options={
                'verbose_name': 'Job Posts',
                'verbose_name_plural': 'Job Post',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='PrivacyPolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('text', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(error_messages={'unique': 'A skill with that name already exists'}, max_length=250, unique=True)),
            ],
            options={
                'verbose_name': 'Skills',
                'verbose_name_plural': 'Skills',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='TermAndCondition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('text', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SavedJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('job_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.jobpost')),
            ],
            options={
                'verbose_name': 'Saved Jobs',
                'verbose_name_plural': 'Saved Jobs',
                'ordering': ('-created_at',),
            },
        ),
        migrations.AddField(
            model_name='jobpost',
            name='skills',
            field=models.ManyToManyField(to='api.skill'),
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('APP', 'Candidate Applied'), ('DEC', 'Company Declined'), ('ACC', 'Company Accepted')], max_length=3)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('job_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.jobpost')),
            ],
            options={
                'verbose_name': 'Job Applications',
                'verbose_name_plural': 'Job Applications',
                'ordering': ('-created_at',),
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='preferred_locations',
            field=models.ManyToManyField(to='api.city'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='skills',
            field=models.ManyToManyField(to='api.skill'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
